---
import { getCollection } from "astro:content";
import FormattedDate from "./FormattedDate.astro";

const { postsPerPage } = Astro.props;
const url = new URL(import.meta.url);
const currentPage = parseInt(url.searchParams.get("page") ?? "1");

const posts = (await getCollection("blog")).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

// Calculate pagination
const totalPosts = posts.length;
const totalPages = Math.ceil(totalPosts / postsPerPage);
const paginatedPosts = posts.slice(
  (currentPage - 1) * postsPerPage,
  currentPage * postsPerPage
);
---

<div class="max-w-4xl mx-auto w-4/5 text-left">
  {
    paginatedPosts.map((post) => (
      <>
        <hr class="h-px my-6 bg-gray-600 border-0" />
        <div class="date">
          <FormattedDate date={post.data.pubDate} />
        </div>
        <h3>
          <a href={`/blog/${post.slug}`}>{post.data.title}</a>
        </h3>
        <div class="leading-loose text-gray-400">{post.data.description}</div>
        <div class="text-custom-pink">
          <a href={`/blog/${post.slug}`}>Read More â†’</a>
        </div>
      </>
    ))
  }

  <!-- Pagination -->
  <div class="pagination mt-8 flex justify-between">
    {
      currentPage > 1 && (
        <a href={`?page=${currentPage - 1}`} class="text-custom-pink">
          Previous
        </a>
      )
    }
    {
      currentPage < totalPages && (
        <a href={`?page=${currentPage + 1}`} class="text-custom-pink">
          Next
        </a>
      )
    }
  </div>
</div>
